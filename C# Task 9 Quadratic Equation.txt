using System;

class QuadraticEquation
{
    static void Main()
    {
        Console.WriteLine("Enter the coefficients for the quadratic equation ax^2 + bx + c = 0:");

        Console.Write("Enter the value of a: ");
        double a = double.Parse(Console.ReadLine());

        Console.Write("Enter the value of b: ");
        double b = double.Parse(Console.ReadLine());

        Console.Write("Enter the value of c: ");
        double c = double.Parse(Console.ReadLine());

        double x1 = 0, x2 = 0;

        // 1. With ref parameters
        if (SolveQEquationRef(a, b, c, ref x1, ref x2))
        {
            Console.WriteLine($"1.With ref parameters: x1 = {x1}, x2 = {x2}");
        }
        else
        {
            Console.WriteLine("1.The quadratic equation has no real solutions.");
        }

        // 2. With Tuple
        var solutionsTuple = SolveQEquationTuple(a, b, c);
        if (solutionsTuple.Item1)
        {
            Console.WriteLine($"2.With Tuple: x1 = {solutionsTuple.Item2}, x2 = {solutionsTuple.Item3}");
        }
        else
        {
            Console.WriteLine("2.The quadratic equation has no real solutions.");
        }

        // 3. With Array
        double[] solutionsArray = SolveQEquationArray(a, b, c);
        if (solutionsArray[0] > 0)
        {
            Console.WriteLine($"3.With Array: x1 = {solutionsArray[1]}, x2 = {solutionsArray[2]}");
        }
        else
        {
            Console.WriteLine("3.The quadratic equation has no real solutions.");
        }

        // 4. With Deconstructing in class
        QuadraticSolution solution = SolveQEquationDeconstruct(a, b, c);
        if (solution.HasSolutions)
        {
            Console.WriteLine($"4.With Deconstructing in class: x1 = {solution.X1}, x2 = {solution.X2}");
        }
        else
        {
            Console.WriteLine("4.The quadratic equation has no real solutions.");
        }
    }

    static bool SolveQEquationRef(double a, double b, double c, ref double x1, ref double x2)
    {
        double discriminant = b * b - 4 * a * c;

        if (discriminant < 0)
        {
            return false; 
        }

        double sqrtDiscriminant = Math.Sqrt(discriminant);
        x1 = (-b + sqrtDiscriminant) / (2 * a);
        x2 = (-b - sqrtDiscriminant) / (2 * a);

        return true;
    }


    static Tuple<bool, double, double> SolveQEquationTuple(double a, double b, double c)
    {
        double discriminant = b * b - 4 * a * c;

        if (discriminant < 0)
        {
            return Tuple.Create(false, 0.0, 0.0); 
        }

        double sqrtDiscriminant = Math.Sqrt(discriminant);
        double x1 = (-b + sqrtDiscriminant) / (2 * a);
        double x2 = (-b - sqrtDiscriminant) / (2 * a);

        return Tuple.Create(true, x1, x2);
    }


    static double[] SolveQEquationArray(double a, double b, double c)
    {
        double discriminant = b * b - 4 * a * c;
        double[] result = new double[3];

        if (discriminant < 0)
        {
            result[0] = 0; 
        }
        else
        {
            double sqrtDiscriminant = Math.Sqrt(discriminant);
            result[0] = 2; 
            result[1] = (-b + sqrtDiscriminant) / (2 * a);
            result[2] = (-b - sqrtDiscriminant) / (2 * a);
        }

        return result;
    }

 
    static QuadraticSolution SolveQEquationDeconstruct(double a, double b, double c)
    {
        double discriminant = b * b - 4 * a * c;

        if (discriminant < 0)
        {
            return new QuadraticSolution(); 
        }

        double sqrtDiscriminant = Math.Sqrt(discriminant);
        double x1 = (-b + sqrtDiscriminant) / (2 * a);
        double x2 = (-b - sqrtDiscriminant) / (2 * a);

        return new QuadraticSolution(x1, x2);
    }
}

class QuadraticSolution
{
    public bool HasSolutions { get; }
    public double X1 { get; }
    public double X2 { get; }

    public QuadraticSolution()
    {
        HasSolutions = false;
        X1 = X2 = 0.0;
    }

    public QuadraticSolution(double x1, double x2)
    {
        HasSolutions = true;
        X1 = x1;
        X2 = x2;
    }
}